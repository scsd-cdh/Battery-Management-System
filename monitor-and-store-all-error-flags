#include <msp430.h>
#include <stdint.h>
#include <stdbool.h>

// Struct to hold error flags
typedef struct {
    bool error_detected;
} ErrorFlags;

// Global instance of error flags
ErrorFlags g_error_flags = {0};

// Function to read error flags
void read_error_flags() {
    // Read error flag from GPIO pin
    g_error_flags.error_detected = (P1IN & BIT0) ? true : false; // Assuming pin P1.0
}

// Function to store error flags
void store_error_flags() {
    // Store error flag to non-volatile memory or transmit to OBC (example)
    // Need to implement this function according to the system requirements
    
    // Assuming each flag is represented by a single bit and transmitted to OBC
    uint8_t stored_flags = g_error_flags.error_detected ? 0x01 : 0x00; // Convert boolean to bit
    
    // Transmit stored_flags to OBC, or store it in non-volatile memory
    // Example: Send it over UART, SPI, I2C, or store it in EEPROM
    // OBC receives this byte and interprets each bit as an error flag
    // OBC then knows that a system reset happened based on the received error flag
}

int main(void) {
   
    // Stop watchdog timer:
    // If system automatically resets upon detecting the error flags and doesnt get stuck or hanging afterwards ...
    // then stopping the watchdog timer wouldnt be needed 
    //WDTCTL = WDTPW | WDTHOLD;

    // Configure GPIO pin for error flag input
    P1DIR &= ~BIT0; // Set P1.0 as input
    P1REN |= BIT0;  // Enable pull-up/pull-down resistor
    P1OUT |= BIT0;  // Set pull-up resistor (assuming active low)

    // Main loop
    while (1) {
        // Read error flag
        read_error_flags();

        // Store error flag
        store_error_flags();
        
        // Optional: Can add delay or perform other operations
    }

    return 0;
}


//Adjust the GPIO pin configuration and the method of transmitting or 
//storing the error flag according to the hardware setup and system requirements.
